#!/bin/bash

# Infrastructure Setup Script for Purchase Tracker
# This script initializes and deploys the infrastructure using OpenTofu

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
INFRA_DIR="$(dirname "$SCRIPT_DIR")"

echo -e "${BLUE}🚀 Purchase Tracker Infrastructure Setup${NC}"
echo "========================================"

# Check if OpenTofu is installed
if ! command -v tofu &> /dev/null; then
    echo -e "${RED}❌ OpenTofu is not installed${NC}"
    echo "Please install OpenTofu first:"
    echo "  brew install opentofu"
    echo "  or visit: https://opentofu.org/docs/intro/install/"
    exit 1
fi

# Check if AWS CLI is installed and configured
if ! command -v aws &> /dev/null; then
    echo -e "${RED}❌ AWS CLI is not installed${NC}"
    echo "Please install AWS CLI first:"
    echo "  brew install awscli"
    exit 1
fi

# Check AWS credentials
if ! aws sts get-caller-identity &> /dev/null; then
    echo -e "${RED}❌ AWS credentials not configured${NC}"
    echo "Please configure AWS CLI first:"
    echo "  aws configure"
    exit 1
fi

echo -e "${GREEN}✅ Prerequisites check passed${NC}"

# Change to infrastructure directory
cd "$INFRA_DIR"

# Check if terraform.tfvars exists
if [ ! -f "terraform.tfvars" ]; then
    echo -e "${YELLOW}⚠️  terraform.tfvars not found${NC}"
    echo "Creating from example..."
    
    if [ -f "terraform.tfvars.example" ]; then
        cp terraform.tfvars.example terraform.tfvars
        echo -e "${YELLOW}📝 Please edit terraform.tfvars with your configuration${NC}"
        echo "Important:"
        echo "  1. Change the db_password to a secure password"
        echo "  2. Update the s3_bucket_name to something unique"
        echo "  3. Review and customize other settings"
        echo ""
        read -p "Press Enter after editing terraform.tfvars..."
    else
        echo -e "${RED}❌ terraform.tfvars.example not found${NC}"
        exit 1
    fi
fi

# Initialize OpenTofu
echo -e "${BLUE}🔧 Initializing OpenTofu...${NC}"
tofu init

# Validate configuration
echo -e "${BLUE}🔍 Validating configuration...${NC}"
tofu validate

if [ $? -ne 0 ]; then
    echo -e "${RED}❌ Configuration validation failed${NC}"
    exit 1
fi

# Plan deployment
echo -e "${BLUE}📋 Planning deployment...${NC}"
tofu plan -var-file="terraform.tfvars" -out=tfplan

if [ $? -ne 0 ]; then
    echo -e "${RED}❌ Planning failed${NC}"
    exit 1
fi

# Confirm deployment
echo -e "${YELLOW}⚠️  Ready to deploy infrastructure${NC}"
echo "This will create AWS resources that may incur costs."
echo "Review the plan above carefully."
echo ""
read -p "Do you want to proceed with deployment? (yes/no): " confirm

if [ "$confirm" != "yes" ]; then
    echo -e "${YELLOW}⏸️  Deployment cancelled${NC}"
    rm -f tfplan
    exit 0
fi

# Apply configuration
echo -e "${BLUE}🚀 Deploying infrastructure...${NC}"
tofu apply tfplan

if [ $? -ne 0 ]; then
    echo -e "${RED}❌ Deployment failed${NC}"
    exit 1
fi

# Clean up plan file
rm -f tfplan

# Save outputs to backend .env file
echo -e "${BLUE}💾 Saving configuration...${NC}"
BACKEND_DIR="$(dirname "$INFRA_DIR")/backend"

if [ -d "$BACKEND_DIR" ]; then
    echo "# Infrastructure outputs - generated by setup.sh" > "$BACKEND_DIR/.env.infrastructure"
    echo "# Generated on: $(date)" >> "$BACKEND_DIR/.env.infrastructure"
    echo "" >> "$BACKEND_DIR/.env.infrastructure"
    
    # Extract key outputs
    tofu output -json | jq -r '
        .backend_env_config.value | to_entries[] | 
        "\(.key)=\(.value)"
    ' >> "$BACKEND_DIR/.env.infrastructure"
    
    echo -e "${GREEN}✅ Configuration saved to backend/.env.infrastructure${NC}"
else
    echo -e "${YELLOW}⚠️  Backend directory not found, saving outputs to infrastructure/outputs.env${NC}"
    tofu output > outputs.env
fi

# Display important information
echo ""
echo -e "${GREEN}🎉 Infrastructure deployment completed!${NC}"
echo "========================================"
echo ""
echo "Important outputs:"
echo "- Cognito User Pool ID: $(tofu output -raw cognito_user_pool_id)"
echo "- S3 Bucket: $(tofu output -raw s3_bucket_name)"
echo "- RDS Endpoint: $(tofu output -raw rds_endpoint)"
echo ""
echo "Next steps:"
echo "1. Update your backend application with the new configuration"
echo "2. Run database migrations: cd backend && npm run db:migrate"
echo "3. Test the backend connection"
echo ""
echo -e "${BLUE}📊 Monitor your AWS costs at: https://console.aws.amazon.com/billing/home${NC}"
echo -e "${YELLOW}⚠️  Remember: Free tier limits apply for 12 months${NC}"

# Check for common issues
echo ""
echo -e "${BLUE}🔍 Checking deployment health...${NC}"

# Test S3 bucket
if aws s3 ls "s3://$(tofu output -raw s3_bucket_name)" &> /dev/null; then
    echo -e "${GREEN}✅ S3 bucket accessible${NC}"
else
    echo -e "${YELLOW}⚠️  S3 bucket check failed${NC}"
fi

# Test RDS connectivity (basic check)
RDS_ENDPOINT=$(tofu output -raw rds_endpoint)
if nc -z "${RDS_ENDPOINT%%:*}" 5432 2>/dev/null; then
    echo -e "${GREEN}✅ RDS instance accessible${NC}"
else
    echo -e "${YELLOW}⚠️  RDS connectivity check failed (this is normal if accessing from outside VPC)${NC}"
fi

echo ""
echo -e "${GREEN}Setup complete! 🚀${NC}"
